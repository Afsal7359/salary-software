{
    "sourceFile": "backend/controller/salarymaster.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1704799024606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1704799024606,
            "name": "Commit-0",
            "content": "const Salarymaster = require(\"../models/salary\");\r\n\r\n\r\nmodule.exports={\r\n    GetSalarymaster:async(req,res)=>{\r\n        try{\r\n            const response = await Salarymaster.find({ isdeleted: { $ne: true } })\r\n            .populate('purpose')\r\n            res.status(200).json({\r\n              success: true,\r\n              message: \"Salarymaster data get Successfully\",\r\n              data:response\r\n            });\r\n        }catch(err){\r\n            res.status(500).json({\r\n                success: false,\r\n                message: \"Failed to Get Salarymaster.\",\r\n                error: err.message,\r\n            });\r\n        }\r\n    },\r\n    AddSalarymaster: async (req, res) => {\r\n      try {\r\n        const { name, PurposeId, type, salarymasterId } = req.body;\r\n        const existingSalaryMaster = await Salarymaster.findOne({ name: name });\r\n    \r\n        if (existingSalaryMaster) {\r\n          if (existingSalaryMaster.isdeleted) {\r\n            const updatedSalaryMaster = await Salarymaster.findOneAndUpdate(\r\n              { name: name },\r\n              { isdeleted: false },\r\n              { new: true }\r\n            );\r\n            res.status(200).json({\r\n              success: true,\r\n              message: \"Salary master added successfully.\",\r\n              data: updatedSalaryMaster,\r\n            });\r\n          } else {\r\n            return res.status(409).json({\r\n              success: false,\r\n              message: \"Salary master already exists.\",\r\n            });\r\n          }\r\n        } else {\r\n          const newSalaryMaster = new Salarymaster({\r\n            name,\r\n            purpose: PurposeId,\r\n            type,\r\n            salarymasterId,\r\n          });\r\n    \r\n          await newSalaryMaster.save();\r\n    \r\n          // Populate the fields and return the populated post\r\n          const Salary = await Salarymaster.populate(newSalaryMaster, [\r\n            { path: 'purpose' },\r\n          ]);\r\n    \r\n          res.status(200).json({\r\n            success: true,\r\n            message: \"Salary master added successfully.\",\r\n            data: Salary,\r\n          });\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        res.status(500).json({\r\n          success: false,\r\n          message: \"Failed to add Salary Master.\",\r\n          error: err.message,\r\n        });\r\n      }\r\n    },\r\n    \r\n    \r\n\r\n            EditSalaryMaster: async (req, res) => {\r\n              try {\r\n                  const { name, purposeId, type, salarymasterId } = req.body;\r\n                  const { id } = req.params;\r\n          \r\n                  // Use updateOne directly on the model to update the document\r\n                  await Salarymaster.updateOne({ _id: id }, {\r\n                      name,\r\n                      purpose: purposeId,\r\n                      type: type,\r\n                      salarymasterId\r\n                  });\r\n          \r\n                  const populatedSalary = await Salarymaster.findById(id)\r\n                  .populate([\r\n                    { path: 'purpose' },\r\n                  ]);\r\n                  res.status(200).json({\r\n                      success: true,\r\n                      message: \"Salary master Edited successfully.\",\r\n                      data: populatedSalary,\r\n                  });\r\n              } catch (err) {\r\n                  res.status(500).json({\r\n                      success: false,\r\n                      message: \"Failed to Edit Salary Master.\",\r\n                      error: err.message,\r\n                  });\r\n              }\r\n          },\r\n          \r\n\r\n    DeleteSalarymaster: async (req, res) => {\r\n        try {\r\n          const {id } = req.params;\r\n    \r\n          // Check if an Employeetype with the specified employeeid exists\r\n          const existingPost = await Salarymaster.findOne({_id:id });\r\n    \r\n          if (!existingPost) {\r\n            return res.status(404).json({\r\n              success: false,\r\n              message: \"Salarymaster not found.\",\r\n              \r\n            });\r\n          }\r\n         \r\n         \r\n         // Soft delete by updating isdeleted field\r\n      await Salarymaster.updateOne({ _id: id }, { $set: { isdeleted: true } });\r\n          res.status(200).json({\r\n            success: true,\r\n            message: \"Deleted successfully.\",\r\n          });\r\n        } catch (err) {\r\n          res.status(500).json({\r\n            success: false,\r\n            message: \"Failed to delete Salarymaster.\",\r\n            error: err.message,\r\n          });\r\n        }\r\n      },\r\n      GetsalarymasterCount : async (req, res) => {\r\n        try {\r\n          const SalarymasterCount = await Salarymaster.countDocuments();\r\n          \r\n          res.status(200).json({\r\n            success: true,\r\n            message: \"Account type count retrieved successfully.\",\r\n            data: { count: SalarymasterCount },\r\n          });\r\n        } catch (error) {\r\n          console.error(\"Error:\", error);\r\n          res.status(500).json({\r\n            success: false,\r\n            message: \"Internal server error.\",\r\n            error: error.message,\r\n          });\r\n        }\r\n      },\r\n      GetSalaryComponent:async(req,res)=>{\r\n        try{\r\n            const response = await Salarymaster.find({ isdeleted: { $ne: true } })\r\n\r\n            const incrementComponents = ([]);\r\n            const decrementComponents = ([]);\r\n            \r\n            response.forEach(item => {\r\n              if (item.type) {\r\n                if (item.type === 'Increment') {\r\n                  incrementComponents.push(item);\r\n                } else if (item.type === 'Decrement') {\r\n                  decrementComponents.push(item);\r\n                }\r\n              }\r\n            });\r\n            \r\n            res.status(200).json({\r\n              success: true,\r\n              message: \"Salarymaster data get Successfully\",\r\n              data:{\r\n                incrementComponents: incrementComponents,\r\n                decrementComponents: decrementComponents\r\n              }\r\n              \r\n            });\r\n        }catch(err){\r\n            res.status(500).json({\r\n                success: false,\r\n                message: \"Failed to Get Salarymaster.\",\r\n                error: err.message,\r\n            });\r\n        }\r\n    },\r\n}"
        }
    ]
}