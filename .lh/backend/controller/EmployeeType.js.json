{
    "sourceFile": "backend/controller/EmployeeType.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1703660266010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1703660266010,
            "name": "Commit-0",
            "content": "const Employeetype = require(\"../models/Employeetype\");\r\n\r\nmodule.exports = {\r\n  AddEmployeetype: async (req, res) => {\r\n    try {\r\n      const data = req.body;\r\n      const existingEmployeetype = await Employeetype.findOne({ name: data.name });\r\n  \r\n      if (existingEmployeetype && existingEmployeetype.isdeleted) {\r\n        // Update the isdeleted flag to false and get the updated document\r\n        const updatedEmployeetype = await Employeetype.findOneAndUpdate(\r\n          { name: data.name },\r\n          { isdeleted: false },\r\n          { new: true } // To get the updated document\r\n        );\r\n        res.status(200).json({\r\n          success: true,\r\n          message: \"Employeetype added successfully.\",\r\n          data: updatedEmployeetype,\r\n        });\r\n      } else if (existingEmployeetype) {\r\n        return res.status(409).json({\r\n          success: false,\r\n          message: \"Employeetype already exists.\",\r\n        });\r\n      } else {\r\n        const newEmployeetype = new Employeetype(data);\r\n        await newEmployeetype.save();\r\n        res.status(200).json({\r\n          success: true,\r\n          message: \"Employeetype added successfully.\",\r\n          data: newEmployeetype,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to add Employeetype.\",\r\n        error: err.message,\r\n      });\r\n    }\r\n  },\r\n  EditEmployeetype: async (req, res) => {\r\n    try {\r\n      const data = req.body;\r\n      const {id } = req.params;\r\n      // Check if an Employeetype with the specified employeetypeid exists\r\n      const existingEmployeetype = await Employeetype.findOne({_id:id});\r\n\r\n      if (!existingEmployeetype) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Employeetype not found.\",\r\n        });\r\n      }\r\n      // Update the existing Employeetype with new data\r\n      await Employeetype.updateOne({ _id: id }, data);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: \"Employeetype edited successfully.\",\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to edit Employeetype.\",\r\n        error: err.message,\r\n      });\r\n    }\r\n  },\r\n\r\n  DeleteEmployeetype: async (req, res) => {\r\n    try {\r\n      const {id } = req.params;\r\n\r\n      // Check if an Employeetype with the specified employeetypeid exists\r\n      const existingEmployeetype = await Employeetype.findOne({_id:id });\r\n\r\n      if (!existingEmployeetype) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Employeetype not found.\",\r\n          \r\n        });\r\n      }\r\n     \r\n     \r\n     // Soft delete by updating isdeleted field\r\n  await Employeetype.updateOne({ _id: id }, { $set: { isdeleted: true } });\r\n      res.status(200).json({\r\n        success: true,\r\n        message: \"Deleted successfully.\",\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to delete Employeetype.\",\r\n        error: err.message,\r\n      });\r\n    }\r\n  },\r\n  GetEmployeetype: async (req, res) => {\r\n    try {\r\n      const { id } = req.params;\r\n      // Retrieve a single Employeetype record based on the specified employeetypeid\r\n      const Employeetypess = await Employeetype.findOne({_id:id});\r\n      if (!Employeetype) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Employeetype not found.\",\r\n        });\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        Employeetypess,\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to get Employeetype.\",\r\n        error: err.message,\r\n      });\r\n    }\r\n  },\r\n  GetallEmployeetype: async (req, res) => {\r\n    try {\r\n      // Retrieve a single Employeetype record based on the specified employeetypeid\r\n      const Employeetypess = await Employeetype.find({ isdeleted: { $ne: true } })\r\n\r\n      if (!Employeetype) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Employeetype not found.\",\r\n        });\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n       data: Employeetypess,\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to get Employeetype.\",\r\n        error: err.message,\r\n      });\r\n    }\r\n  },\r\n  GetEmployeeTypeCount : async (req, res) => {\r\n    try {\r\n      const EmployeetypeCount = await Employeetype.countDocuments();\r\n      \r\n      res.status(200).json({\r\n        success: true,\r\n        message: \"EmployeetypeCount count retrieved successfully.\",\r\n        data: { count: EmployeetypeCount },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error.\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  }\r\n};\r\n"
        }
    ]
}