{
    "sourceFile": "frontend/src/Components/Report/Salaryreport.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1704954415783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704954423314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,409 @@\n+import React, { useMemo,useState,useEffect } from 'react'\r\n+import PageHeader from '../PageHeader'\r\n+import { GetMonthlyReport } from '../../Apicalls/Report';\r\n+import { toast } from 'react-toastify';\r\n+import { GetSalaryComponent } from '../../Apicalls/salarymaster';\r\n+import * as XLSX from 'xlsx';\r\n+\r\n+function Salaryreport() {\r\n+\r\n+    const headerdata = useMemo(()=>{\r\n+        return{\r\n+            data:\"REPORT\",\r\n+            page:\"Salary Monthly Report\"\r\n+        }\r\n+    },[])\r\n+\r\n+    const set1 = ['A', 'B', 'C', 'D'];\r\n+  const set2 = ['C', 'D', 'E', 'F'];\r\n+  const tableData = ['A', 'B', 'C', 'D'];\r\n+\r\n+  const [matchingElements, setMatchingElements] = useState([]);\r\n+\r\n+  const [salaryComponent,setSalaryComponent]=useState([]);\r\n+  const [issalaryComponentDataFetch, setissalaryComponentDataFetch]=useState(false);\r\n+  const [fromMonth,setFromMonth]=useState('');\r\n+  const [toMonth,setToMonth]=useState('');\r\n+  const [Data,setData]=useState('');\r\n+\r\n+  useEffect(()=>{\r\n+    salarymasterDataFetch();\r\n+  },[Data])\r\n+\r\n+  const salarymasterDataFetch = async()=>{\r\n+    try {\r\n+      if(!issalaryComponentDataFetch){\r\n+        const response=await GetSalaryComponent();\r\n+        if(response.success){\r\n+\t\t\t\t\tsetSalaryComponent(response.data);\r\n+\t\t\t\t}else{\r\n+\t\t\t\t\tsetSalaryComponent([]);\r\n+\t\t\t\t}\r\n+\t\t\t}setissalaryComponentDataFetch(true)\r\n+    } catch (error) {\r\n+      toast.error(error.message)\r\n+    }\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    const foundElements = tableData.filter(\r\n+      element => set1.includes(element) && set2.includes(element)\r\n+    );\r\n+    setMatchingElements(foundElements);\r\n+  }, []);\r\n+\r\n+\r\n+ \r\n+\r\n+  const handlesubmit =async(event)=>{\r\n+    event.preventDefault();\r\n+  try {\r\n+    const formdata = {\r\n+      fromMonth : fromMonth,\r\n+      toMonth : toMonth,\r\n+    }\r\n+  const response = await GetMonthlyReport(formdata)\r\n+  if (response.success){\r\n+    setData(response.data);\r\n+    toast.success(response.message)\r\n+    }else{\r\n+      toast.error(response.message)\r\n+    }\r\n+\r\n+  } catch (error) {\r\n+    console.log(error);\r\n+    toast.error(error.message);\r\n+  }\r\n+  \r\n+ \r\n+   }\r\n+   console.log(Data,\":;;;;dddddddata\");\r\n+   console.log(salaryComponent,\"salaryComponent\");\r\n+\r\n+   const permenantstaff =[]\r\n+   const dailywagestaff =[]\r\n+   const contractstaff =[]\r\n+\r\n+   if (Data.length > 0) {\r\n+\r\n+   Data.forEach(item => {\r\n+    if (item.EmployeeTypeId) {\r\n+      if (item.EmployeeTypeId === '6566be7b0085f19cfbfd00c1') {\r\n+        permenantstaff.push(item);\r\n+      } else if (item.EmployeeTypeId === '659bbd63d4d7dd6ffd8dfd7f') {\r\n+        dailywagestaff.push(item);\r\n+      }else if(item.EmployeeTypeId === '659cd2f6a247674dda047a1d'){\r\n+        contractstaff.push(item);\r\n+      }\r\n+    }\r\n+  });\r\n+}else{\r\n+  console.error(\"salaryComponent is not an array\");\r\n+}\r\n+const downloadExcel = (event) => {\r\n+  event.preventDefault();\r\n+\r\n+  const worksheet = XLSX.utils.table_to_sheet(document.querySelector('.comman-table'));\r\n+\r\n+  // Set colors for specific columns\r\n+  const greyColor = { patternType: 'solid', fgColor: { rgb: 'C0C0C0' } };\r\n+  const pinkColor = { patternType: 'solid', fgColor: { rgb: 'FFC0CB' } };\r\n+\r\n+  const columnColors = [\r\n+    greyColor, // Color for the first column\r\n+    greyColor, // Color for the second column\r\n+    greyColor, // Color for the third column\r\n+    pinkColor, // Color for the fourth column and onwards\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+    pinkColor,\r\n+  ];\r\n+\r\n+  const range = XLSX.utils.decode_range(worksheet['!ref']);\r\n+\r\n+  for (let i = range.s.r; i <= range.e.r; ++i) {\r\n+    for (let j = range.s.c; j <= range.e.c; ++j) {\r\n+      const cellAddress = XLSX.utils.encode_cell({ r: i, c: j });\r\n+\r\n+      if (worksheet[cellAddress] && worksheet[cellAddress].s && columnColors[j]) {\r\n+        worksheet[cellAddress].s = columnColors[j];\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  const wb = XLSX.utils.book_new();\r\n+  XLSX.utils.book_append_sheet(wb, worksheet, 'Sheet1');\r\n+  XLSX.writeFile(wb, `Report of _${fromMonth} to ${toMonth}.xlsx`);\r\n+};\r\n+\r\n+\r\n+  return (\r\n+    <>\r\n+    <PageHeader headerdata={headerdata}/>\r\n+    {/* <div>\r\n+      <table>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>1 Set of Data</th>\r\n+            <th>Matching Data</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {tableData.map((item, index) => (\r\n+            <tr key={index}>\r\n+              <td>{item}</td>\r\n+              <td>{matchingElements.includes(item) ? item : '-'}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n+    </div> */}\r\n+       <div className=\"card card-table show-entire\">\r\n+              <div className=\"card-body\">\r\n+                <div className=\"page-table-header mb-2\">\r\n+                  <div className=\"row align-items-center\">\r\n+                  <div className=\"col\">\r\n+                      <div className=\"doctor-table-blk\">\r\n+                        <h3> REPORT</h3>\r\n+                        <div className=\"doctor-search-blk\">\r\n+                          {/* <div className=\"top-nav-search table-search-blk\">\r\n+                            <form>\r\n+                              <input type=\"text\" className=\"form-control\" placeholder=\"Search here\" />\r\n+                              <a className=\"btn\" >\r\n+                                <img src={searchicon} alt=\"\" />\r\n+                              </a>\r\n+                            </form>\r\n+                          \r\n+                          </div> */}\r\n+                          <div className=\"add-groups\">\r\n+                            {/* <a href=\"add-doctor.html\" className=\"btn btn-primary add-pluss ms-2\">\r\n+                           \r\n+                              <img src={addicon} alt=\"\" />\r\n+                            </a> */}\r\n+                            \r\n+                          </div>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+\r\n+                    <div className=\"col-auto  ms-auto\">\r\n+                      \r\n+                      <form >\r\n+                        \r\n+                            \r\n+                        <a type='button' className=\" me-2\" >\r\n+                          {/* <img src={pdficon} alt=\"\" /> */}\r\n+                          <input\r\n+                          className='form-control'\r\n+                            type=\"date\"\r\n+                            value={fromMonth}\r\n+                            onChange={(e) => setFromMonth(e.target.value)}\r\n+                            required\r\n+                          />\r\n+                        </a>\r\n+                        <a type='button'  className=\" me-2\">\r\n+                          {/* <img src={TXticon} alt=\"\" /> */}\r\n+                          <input\r\n+                            // {...register('toMonth', { required: 'Please select a month' })}\r\n+                          className='form-control'\r\n+                            type=\"date\"\r\n+                            value={toMonth}\r\n+                            onChange={(e) => setToMonth(e.target.value)}\r\n+                            required\r\n+                          />\r\n+                          \r\n+                          </a>\r\n+  \r\n+                        <button className=\" btn btn-primary submit-form m-3\" onClick={handlesubmit}>\r\n+                            Submit\r\n+                        </button>\r\n+                        <button className='btn btn-primary submit-form m-2' onClick={downloadExcel}>Download Excel</button>\r\n+                    \r\n+                        </form>\r\n+                      </div>\r\n+                  </div>\r\n+                </div>\r\n+                {Data.length === 0 ? \r\n+                (<p className='m-3'>No Data Available</p>):(\r\n+                    <div className=\"table-responsive\">\r\n+                  <table className=\"table border-0 custom-table comman-table  mb-0 table-responsive\">\r\n+                    <thead>\r\n+                      <tr style={{border:\"2px solid\"}}>\r\n+                       <th  style={{border:\"2px solid\",textAlign:\"center\"}} colSpan={7}><div>Employee Master data</div></th>\r\n+                       <th  style={{border:\"2px solid\",textAlign:\"center\"}} colSpan={(salaryComponent.incrementComponents.length)+1}><div>Pay Item </div></th>\r\n+                       <th  style={{textAlign:\"center\"}} colSpan={(salaryComponent.decrementComponents.length)+1}><div>Deduction</div></th>\r\n+                      </tr>\r\n+                     \r\n+                      <tr>\r\n+                          <th  style={{border:\"2px solid\"}}>SL NO</th>\r\n+                          <th style={{border:\"2px solid\"}}>Employee Name</th>\r\n+                          <th style={{border:\"2px solid\"}}>Employee Type</th>\r\n+                          <th style={{border:\"2px solid\"}}>Basic Pay</th>\r\n+                          <th style={{border:\"2px solid\"}}>N.O Of Days In Month</th>\r\n+                          <th style={{border:\"2px solid\"}}>Loss Of Pay Days</th>\r\n+                          <th style={{border:\"2px solid\"}}>Loss Of Pay</th>\r\n+                          <th style={{border:\"2px solid\"}}>Eligible Pay</th>\r\n+                          {/* Headers for increment components */}\r\n+                          {salaryComponent.incrementComponents.map((data, index) => (\r\n+                            <th key={index} style={{border:\"2px solid\"}}>{data.name}</th>\r\n+                          ))}\r\n+                          <th style={{border:\"2px solid\"}}>Total Earnings</th>\r\n+                          {/* Headers for decrement components */}\r\n+                          {salaryComponent.decrementComponents.map((data, index) => (\r\n+                            <th key={index} style={{border:\"2px solid\"}}>{data.name}</th>\r\n+                          ))}\r\n+                          <th style={{border:\"2px solid\"}}>Total Deduction</th>\r\n+                          <th style={{border:\"2px solid\"}}>Total Net Amount</th>\r\n+                        </tr>\r\n+                        {permenantstaff.map((data, index) => (\r\n+                          <tr key={index}>\r\n+                            <td style={{border:\"2px solid\"}}>{index+1}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.name}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.EmployeeType}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.basicSalary}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{30}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.LossOfPayDays}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.LossOfPay}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.EligiblePay}</td>\r\n+                            \r\n+                            {/* Matching and rendering increment components */}\r\n+                            {salaryComponent.incrementComponents.map((incComponent, incIndex) => {\r\n+                              const tableDataMatch = data.tabledata.find(\r\n+                                tableItem => tableItem.salaryComponent.name === incComponent.name\r\n+                              );\r\n+                              return (\r\n+                                <td key={incIndex} style={{border:\"2px solid\"}}>\r\n+                                  {tableDataMatch && tableDataMatch.salaryComponent.name === incComponent.name ? tableDataMatch.price : null}\r\n+                                </td>\r\n+                              );\r\n+                            })}\r\n+                            \r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalIncrement}</td>\r\n+                            \r\n+                            {/* Matching and rendering decrement components */}\r\n+                            {salaryComponent.decrementComponents.map((decComponent, decIndex) => {\r\n+                              const tableDataMatch = data.tabledata.find(\r\n+                                tableItem => tableItem.salaryComponent.name === decComponent.name\r\n+                              );\r\n+                              return (\r\n+                                <td key={decIndex} style={{border:\"2px solid\"}}>\r\n+                                  {tableDataMatch && tableDataMatch.salaryComponent.name === decComponent.name ? tableDataMatch.price : null}\r\n+                                </td>\r\n+                              );\r\n+                            })}\r\n+                            \r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalDeduction}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalGrossSalary}</td>\r\n+                          </tr>\r\n+                        ))}\r\n+\r\n+                        <tr></tr>\r\n+                         {contractstaff.map((data, index) => (\r\n+                          <tr key={index}>\r\n+                            <td style={{border:\"2px solid\"}}>{permenantstaff.length+1}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.name}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.EmployeeType}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.basicSalary}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{30}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.LossOfPayDays}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.LossOfPay}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.EligiblePay}</td>\r\n+                            {/* Matching and rendering increment components */}\r\n+                            {salaryComponent.incrementComponents.map((incComponent, incIndex) => {\r\n+                              const tableDataMatch = data.tabledata.find(\r\n+                                tableItem => tableItem.salaryComponent.name === incComponent.name\r\n+                              );\r\n+                              return (\r\n+                                <td key={incIndex} style={{border:\"2px solid\"}}>\r\n+                                  {tableDataMatch && tableDataMatch.salaryComponent.name === incComponent.name ? tableDataMatch.price : null}\r\n+                                </td>\r\n+                              );\r\n+                            })}\r\n+                            \r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalIncrement}</td>\r\n+                            \r\n+                            {/* Matching and rendering decrement components */}\r\n+                            {salaryComponent.decrementComponents.map((decComponent, decIndex) => {\r\n+                              const tableDataMatch = data.tabledata.find(\r\n+                                tableItem => tableItem.salaryComponent.name === decComponent.name\r\n+                              );\r\n+                              return (\r\n+                                <td key={decIndex} style={{border:\"2px solid\"}}>\r\n+                                  {tableDataMatch && tableDataMatch.salaryComponent.name === decComponent.name ? tableDataMatch.price : null}\r\n+                                </td>\r\n+                              );\r\n+                            })}\r\n+                            \r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalDeduction}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalGrossSalary}</td>\r\n+                           </tr> \r\n+                          ))}\r\n+                          <tr></tr>\r\n+\r\n+                          {dailywagestaff.map((data, index) => (\r\n+                          <tr key={index}>\r\n+                            <td style={{border:\"2px solid\"}}>{permenantstaff.length+contractstaff.length+1}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.name}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.EmployeeType}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.basicSalary}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{30}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.LossOfPayDays}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.LossOfPay}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.EligiblePay}</td>\r\n+                           {/* Matching and rendering increment components */}\r\n+                           {salaryComponent.incrementComponents.map((incComponent, incIndex) => {\r\n+                              const tableDataMatch = data.tabledata.find(\r\n+                                tableItem => tableItem.salaryComponent.name === incComponent.name\r\n+                              );\r\n+                              return (\r\n+                                <td key={incIndex} style={{border:\"2px solid\"}}>\r\n+                                  {tableDataMatch && tableDataMatch.salaryComponent.name === incComponent.name ? tableDataMatch.price : null}\r\n+                                </td>\r\n+                              );\r\n+                            })}\r\n+                            \r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalIncrement}</td>\r\n+                            \r\n+                            {/* Matching and rendering decrement components */}\r\n+                            {salaryComponent.decrementComponents.map((decComponent, decIndex) => {\r\n+                              const tableDataMatch = data.tabledata.find(\r\n+                                tableItem => tableItem.salaryComponent.name === decComponent.name\r\n+                              );\r\n+                              return (\r\n+                                <td key={decIndex} style={{border:\"2px solid\"}}>\r\n+                                  {tableDataMatch && tableDataMatch.salaryComponent.name === decComponent.name ? tableDataMatch.price : null}\r\n+                                </td>\r\n+                              );\r\n+                            })}\r\n+                            \r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalDeduction}</td>\r\n+                            <td style={{border:\"2px solid\"}}>{data.TotalGrossSalary}</td>\r\n+                           </tr> \r\n+                          ))}\r\n+                    </thead>\r\n+                    <tbody>\r\n+                    </tbody>\r\n+                  </table>\r\n+                \r\n+                </div>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+    </>\r\n+  )\r\n+}\r\n+\r\n+export default Salaryreport\n\\ No newline at end of file\n"
                }
            ],
            "date": 1704954415783,
            "name": "Commit-0",
            "content": "import React, { useMemo,useState,useEffect } from 'react'\r\nimport PageHeader from '../PageHeader'\r\nimport { GetMonthlyReport } from '../../Apicalls/Report';\r\nimport { toast } from 'react-toastify';\r\nimport { GetSalaryComponent } from '../../Apicalls/salarymaster';\r\nimport * as XLSX from 'xlsx';\r\n\r\nfunction Salaryreport() {\r\n\r\n    const headerdata = useMemo(()=>{\r\n        return{\r\n            data:\"REPORT\",\r\n            page:\"Salary Monthly Report\"\r\n        }\r\n    },[])\r\n\r\n    const set1 = ['A', 'B', 'C', 'D'];\r\n  const set2 = ['C', 'D', 'E', 'F'];\r\n  const tableData = ['A', 'B', 'C', 'D'];\r\n\r\n  const [matchingElements, setMatchingElements] = useState([]);\r\n\r\n  const [salaryComponent,setSalaryComponent]=useState([]);\r\n  const [issalaryComponentDataFetch, setissalaryComponentDataFetch]=useState(false);\r\n  const [fromMonth,setFromMonth]=useState('');\r\n  const [toMonth,setToMonth]=useState('');\r\n  const [Data,setData]=useState('');\r\n\r\n  useEffect(()=>{\r\n    salarymasterDataFetch();\r\n  },[Data])\r\n\r\n  const salarymasterDataFetch = async()=>{\r\n    try {\r\n      if(!issalaryComponentDataFetch){\r\n        const response=await GetSalaryComponent();\r\n        if(response.success){\r\n\t\t\t\t\tsetSalaryComponent(response.data);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tsetSalaryComponent([]);\r\n\t\t\t\t}\r\n\t\t\t}setissalaryComponentDataFetch(true)\r\n    } catch (error) {\r\n      toast.error(error.message)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const foundElements = tableData.filter(\r\n      element => set1.includes(element) && set2.includes(element)\r\n    );\r\n    setMatchingElements(foundElements);\r\n  }, []);\r\n\r\n\r\n \r\n\r\n  const handlesubmit =async(event)=>{\r\n    event.preventDefault();\r\n  try {\r\n    const formdata = {\r\n      fromMonth : fromMonth,\r\n      toMonth : toMonth,\r\n    }\r\n  const response = await GetMonthlyReport(formdata)\r\n  if (response.success){\r\n    setData(response.data);\r\n    toast.success(response.message)\r\n    }else{\r\n      toast.error(response.message)\r\n    }\r\n\r\n  } catch (error) {\r\n    console.log(error);\r\n    toast.error(error.message);\r\n  }\r\n  \r\n \r\n   }\r\n   console.log(Data,\":;;;;dddddddata\");\r\n   console.log(salaryComponent,\"salaryComponent\");\r\n\r\n   const permenantstaff =[]\r\n   const dailywagestaff =[]\r\n   const contractstaff =[]\r\n\r\n   if (Data.length > 0) {\r\n\r\n   Data.forEach(item => {\r\n    if (item.EmployeeTypeId) {\r\n      if (item.EmployeeTypeId === '6566be7b0085f19cfbfd00c1') {\r\n        permenantstaff.push(item);\r\n      } else if (item.EmployeeTypeId === '659bbd63d4d7dd6ffd8dfd7f') {\r\n        dailywagestaff.push(item);\r\n      }else if(item.EmployeeTypeId === '659cd2f6a247674dda047a1d'){\r\n        contractstaff.push(item);\r\n      }\r\n    }\r\n  });\r\n}else{\r\n  console.error(\"salaryComponent is not an array\");\r\n}\r\nconst downloadExcel = (event) => {\r\n  event.preventDefault();\r\n\r\n  const worksheet = XLSX.utils.table_to_sheet(document.querySelector('.comman-table'));\r\n\r\n  // Set colors for specific columns\r\n  const greyColor = { patternType: 'solid', fgColor: { rgb: 'C0C0C0' } };\r\n  const pinkColor = { patternType: 'solid', fgColor: { rgb: 'FFC0CB' } };\r\n\r\n  const columnColors = [\r\n    greyColor, // Color for the first column\r\n    greyColor, // Color for the second column\r\n    greyColor, // Color for the third column\r\n    pinkColor, // Color for the fourth column and onwards\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n    pinkColor,\r\n  ];\r\n\r\n  const range = XLSX.utils.decode_range(worksheet['!ref']);\r\n\r\n  for (let i = range.s.r; i <= range.e.r; ++i) {\r\n    for (let j = range.s.c; j <= range.e.c; ++j) {\r\n      const cellAddress = XLSX.utils.encode_cell({ r: i, c: j });\r\n\r\n      if (worksheet[cellAddress] && worksheet[cellAddress].s && columnColors[j]) {\r\n        worksheet[cellAddress].s = columnColors[j];\r\n      }\r\n    }\r\n  }\r\n\r\n  const wb = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(wb, worksheet, 'Sheet1');\r\n  XLSX.writeFile(wb, `Report of _${fromMonth} to ${toMonth}.xlsx`);\r\n};\r\n\r\n\r\n  return (\r\n    <>\r\n    <PageHeader headerdata={headerdata}/>\r\n    {/* <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>1 Set of Data</th>\r\n            <th>Matching Data</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tableData.map((item, index) => (\r\n            <tr key={index}>\r\n              <td>{item}</td>\r\n              <td>{matchingElements.includes(item) ? item : '-'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div> */}\r\n       <div className=\"card card-table show-entire\">\r\n              <div className=\"card-body\">\r\n                <div className=\"page-table-header mb-2\">\r\n                  <div className=\"row align-items-center\">\r\n                  <div className=\"col\">\r\n                      <div className=\"doctor-table-blk\">\r\n                        <h3>M REPORT</h3>\r\n                        <div className=\"doctor-search-blk\">\r\n                          {/* <div className=\"top-nav-search table-search-blk\">\r\n                            <form>\r\n                              <input type=\"text\" className=\"form-control\" placeholder=\"Search here\" />\r\n                              <a className=\"btn\" >\r\n                                <img src={searchicon} alt=\"\" />\r\n                              </a>\r\n                            </form>\r\n                          \r\n                          </div> */}\r\n                          <div className=\"add-groups\">\r\n                            {/* <a href=\"add-doctor.html\" className=\"btn btn-primary add-pluss ms-2\">\r\n                           \r\n                              <img src={addicon} alt=\"\" />\r\n                            </a> */}\r\n                            \r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-auto  ms-auto\">\r\n                      \r\n                      <form >\r\n                        \r\n                            \r\n                        <a type='button' className=\" me-2\" >\r\n                          {/* <img src={pdficon} alt=\"\" /> */}\r\n                          <input\r\n                          className='form-control'\r\n                            type=\"date\"\r\n                            value={fromMonth}\r\n                            onChange={(e) => setFromMonth(e.target.value)}\r\n                            required\r\n                          />\r\n                        </a>\r\n                        <a type='button'  className=\" me-2\">\r\n                          {/* <img src={TXticon} alt=\"\" /> */}\r\n                          <input\r\n                            // {...register('toMonth', { required: 'Please select a month' })}\r\n                          className='form-control'\r\n                            type=\"date\"\r\n                            value={toMonth}\r\n                            onChange={(e) => setToMonth(e.target.value)}\r\n                            required\r\n                          />\r\n                          \r\n                          </a>\r\n  \r\n                        <button className=\" btn btn-primary submit-form m-3\" onClick={handlesubmit}>\r\n                            Submit\r\n                        </button>\r\n                        <button className='btn btn-primary submit-form m-2' onClick={downloadExcel}>Download Excel</button>\r\n                    \r\n                        </form>\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n                {Data.length === 0 ? \r\n                (<p className='m-3'>No Data Available</p>):(\r\n                    <div className=\"table-responsive\">\r\n                  <table className=\"table border-0 custom-table comman-table  mb-0 table-responsive\">\r\n                    <thead>\r\n                      <tr style={{border:\"2px solid\"}}>\r\n                       <th  style={{border:\"2px solid\",textAlign:\"center\"}} colSpan={7}><div>Employee Master data</div></th>\r\n                       <th  style={{border:\"2px solid\",textAlign:\"center\"}} colSpan={(salaryComponent.incrementComponents.length)+1}><div>Pay Item </div></th>\r\n                       <th  style={{textAlign:\"center\"}} colSpan={(salaryComponent.decrementComponents.length)+1}><div>Deduction</div></th>\r\n                      </tr>\r\n                     \r\n                      <tr>\r\n                          <th  style={{border:\"2px solid\"}}>SL NO</th>\r\n                          <th style={{border:\"2px solid\"}}>Employee Name</th>\r\n                          <th style={{border:\"2px solid\"}}>Employee Type</th>\r\n                          <th style={{border:\"2px solid\"}}>Basic Pay</th>\r\n                          <th style={{border:\"2px solid\"}}>N.O Of Days In Month</th>\r\n                          <th style={{border:\"2px solid\"}}>Loss Of Pay Days</th>\r\n                          <th style={{border:\"2px solid\"}}>Loss Of Pay</th>\r\n                          <th style={{border:\"2px solid\"}}>Eligible Pay</th>\r\n                          {/* Headers for increment components */}\r\n                          {salaryComponent.incrementComponents.map((data, index) => (\r\n                            <th key={index} style={{border:\"2px solid\"}}>{data.name}</th>\r\n                          ))}\r\n                          <th style={{border:\"2px solid\"}}>Total Earnings</th>\r\n                          {/* Headers for decrement components */}\r\n                          {salaryComponent.decrementComponents.map((data, index) => (\r\n                            <th key={index} style={{border:\"2px solid\"}}>{data.name}</th>\r\n                          ))}\r\n                          <th style={{border:\"2px solid\"}}>Total Deduction</th>\r\n                          <th style={{border:\"2px solid\"}}>Total Net Amount</th>\r\n                        </tr>\r\n                        {permenantstaff.map((data, index) => (\r\n                          <tr key={index}>\r\n                            <td style={{border:\"2px solid\"}}>{index+1}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.name}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.EmployeeType}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.basicSalary}</td>\r\n                            <td style={{border:\"2px solid\"}}>{30}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.LossOfPayDays}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.LossOfPay}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.EligiblePay}</td>\r\n                            \r\n                            {/* Matching and rendering increment components */}\r\n                            {salaryComponent.incrementComponents.map((incComponent, incIndex) => {\r\n                              const tableDataMatch = data.tabledata.find(\r\n                                tableItem => tableItem.salaryComponent.name === incComponent.name\r\n                              );\r\n                              return (\r\n                                <td key={incIndex} style={{border:\"2px solid\"}}>\r\n                                  {tableDataMatch && tableDataMatch.salaryComponent.name === incComponent.name ? tableDataMatch.price : null}\r\n                                </td>\r\n                              );\r\n                            })}\r\n                            \r\n                            <td style={{border:\"2px solid\"}}>{data.TotalIncrement}</td>\r\n                            \r\n                            {/* Matching and rendering decrement components */}\r\n                            {salaryComponent.decrementComponents.map((decComponent, decIndex) => {\r\n                              const tableDataMatch = data.tabledata.find(\r\n                                tableItem => tableItem.salaryComponent.name === decComponent.name\r\n                              );\r\n                              return (\r\n                                <td key={decIndex} style={{border:\"2px solid\"}}>\r\n                                  {tableDataMatch && tableDataMatch.salaryComponent.name === decComponent.name ? tableDataMatch.price : null}\r\n                                </td>\r\n                              );\r\n                            })}\r\n                            \r\n                            <td style={{border:\"2px solid\"}}>{data.TotalDeduction}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.TotalGrossSalary}</td>\r\n                          </tr>\r\n                        ))}\r\n\r\n                        <tr></tr>\r\n                         {contractstaff.map((data, index) => (\r\n                          <tr key={index}>\r\n                            <td style={{border:\"2px solid\"}}>{permenantstaff.length+1}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.name}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.EmployeeType}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.basicSalary}</td>\r\n                            <td style={{border:\"2px solid\"}}>{30}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.LossOfPayDays}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.LossOfPay}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.EligiblePay}</td>\r\n                            {/* Matching and rendering increment components */}\r\n                            {salaryComponent.incrementComponents.map((incComponent, incIndex) => {\r\n                              const tableDataMatch = data.tabledata.find(\r\n                                tableItem => tableItem.salaryComponent.name === incComponent.name\r\n                              );\r\n                              return (\r\n                                <td key={incIndex} style={{border:\"2px solid\"}}>\r\n                                  {tableDataMatch && tableDataMatch.salaryComponent.name === incComponent.name ? tableDataMatch.price : null}\r\n                                </td>\r\n                              );\r\n                            })}\r\n                            \r\n                            <td style={{border:\"2px solid\"}}>{data.TotalIncrement}</td>\r\n                            \r\n                            {/* Matching and rendering decrement components */}\r\n                            {salaryComponent.decrementComponents.map((decComponent, decIndex) => {\r\n                              const tableDataMatch = data.tabledata.find(\r\n                                tableItem => tableItem.salaryComponent.name === decComponent.name\r\n                              );\r\n                              return (\r\n                                <td key={decIndex} style={{border:\"2px solid\"}}>\r\n                                  {tableDataMatch && tableDataMatch.salaryComponent.name === decComponent.name ? tableDataMatch.price : null}\r\n                                </td>\r\n                              );\r\n                            })}\r\n                            \r\n                            <td style={{border:\"2px solid\"}}>{data.TotalDeduction}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.TotalGrossSalary}</td>\r\n                           </tr> \r\n                          ))}\r\n                          <tr></tr>\r\n\r\n                          {dailywagestaff.map((data, index) => (\r\n                          <tr key={index}>\r\n                            <td style={{border:\"2px solid\"}}>{permenantstaff.length+contractstaff.length+1}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.name}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.EmployeeType}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.basicSalary}</td>\r\n                            <td style={{border:\"2px solid\"}}>{30}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.LossOfPayDays}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.LossOfPay}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.EligiblePay}</td>\r\n                           {/* Matching and rendering increment components */}\r\n                           {salaryComponent.incrementComponents.map((incComponent, incIndex) => {\r\n                              const tableDataMatch = data.tabledata.find(\r\n                                tableItem => tableItem.salaryComponent.name === incComponent.name\r\n                              );\r\n                              return (\r\n                                <td key={incIndex} style={{border:\"2px solid\"}}>\r\n                                  {tableDataMatch && tableDataMatch.salaryComponent.name === incComponent.name ? tableDataMatch.price : null}\r\n                                </td>\r\n                              );\r\n                            })}\r\n                            \r\n                            <td style={{border:\"2px solid\"}}>{data.TotalIncrement}</td>\r\n                            \r\n                            {/* Matching and rendering decrement components */}\r\n                            {salaryComponent.decrementComponents.map((decComponent, decIndex) => {\r\n                              const tableDataMatch = data.tabledata.find(\r\n                                tableItem => tableItem.salaryComponent.name === decComponent.name\r\n                              );\r\n                              return (\r\n                                <td key={decIndex} style={{border:\"2px solid\"}}>\r\n                                  {tableDataMatch && tableDataMatch.salaryComponent.name === decComponent.name ? tableDataMatch.price : null}\r\n                                </td>\r\n                              );\r\n                            })}\r\n                            \r\n                            <td style={{border:\"2px solid\"}}>{data.TotalDeduction}</td>\r\n                            <td style={{border:\"2px solid\"}}>{data.TotalGrossSalary}</td>\r\n                           </tr> \r\n                          ))}\r\n                    </thead>\r\n                    <tbody>\r\n                    </tbody>\r\n                  </table>\r\n                \r\n                </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Salaryreport"
        }
    ]
}