{
    "sourceFile": "frontend/src/Components/Report/Esi.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1704955347207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704955381738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import React,{useState,useEffect, useMemo} from 'react'\r\n+import * as XLSX from 'xlsx';\r\n+import { toast } from 'react-toastify';\r\n+import { GetESIReport } from '../../Apicalls/Report';\r\n+import PageHeader from '../PageHeader';\r\n+\r\n+function Esi() {\r\n+  const [fromMonth, setFromMonth] = useState('');\r\n+  const [toMonth, setToMonth] = useState('');\r\n+  const [Data, setData] = useState([]);\r\n+  const [lastworkday, setLastWorkDay] = useState('');\r\n+  const [tablerow, setTablerow] = useState([]);\r\n+  const [selectedValue, setSelectedValue] = useState('');\r\n+\r\n+\r\n+  const handlesubmit = async (event) => {\r\n+    event.preventDefault();\r\n+    try {\r\n+      const formdata = {\r\n+        fromMonth: fromMonth,\r\n+        toMonth: toMonth,\r\n+      };\r\n+      const response = await GetESIReport(formdata);\r\n+      if (response.success) {\r\n+        setData(response.data);\r\n+        toast.success(response.message);\r\n+      } else {\r\n+        toast.error(response.message);\r\n+      }\r\n+    } catch (error) {\r\n+      console.log(error);\r\n+      toast.error(error.message);\r\n+    }\r\n+  };\r\n+  const options = [\r\n+    { value: '1', label: 'Option 1' },\r\n+    { value: '2', label: 'Option 2' },\r\n+    { value: '3', label: 'Option 3' },\r\n+    { value: '4', label: 'Option 4' },\r\n+    // Add more options here as needed...\r\n+  ];\r\n+\r\n+\r\n+  const handleSelectChange = (index, event) => {\r\n+    const value = event.target.value;\r\n+  \r\n+    setTablerow(prevRows => {\r\n+      const updatedRows = prevRows.map((row, i) => {\r\n+        if (i === index) {\r\n+          return { ...row, selectedValue: value };\r\n+        }\r\n+        return row;\r\n+      });\r\n+      return updatedRows;\r\n+    });\r\n+  };\r\n+  \r\n+  \r\n+  \r\n+  const headerdata = useMemo(() => {\r\n+\t\treturn {\r\n+\t\t  data:\"REPORT\",\r\n+\t\t  page:\"ESI REPORT\"\r\n+\t\t};\r\n+\t  }, []);\r\n+\r\n+\r\n+  const handleDateChange = (index, value) => {\r\n+    setTablerow(prevRows => {\r\n+      const updatedRows = [...prevRows];\r\n+      updatedRows[index] = {\r\n+        ...updatedRows[index],\r\n+        lastworkday: value\r\n+      };\r\n+      return updatedRows;\r\n+    });\r\n+  };\r\n+\r\n+  console.log(tablerow,\":tablerow\");\r\n+\r\n+  useEffect(()=>{\r\n+    if (Data&&tablerow) {\r\n+      const combinedArray = Data.map((row, index) => ({\r\n+        ...row,\r\n+        ...tablerow[index]\r\n+      }));\r\n+      setData(combinedArray)\r\n+      console.log(combinedArray,\":Combined Arrayys\");\r\n+    } else {\r\n+      console.error('Arrays are of different lengths. Cannot combine.');\r\n+    }\r\n+  \r\n+  },[tablerow])\r\n+\r\n+const downloadExcel = () => {\r\n+    const worksheet = XLSX.utils.table_to_sheet(document.querySelector('.comman-tabless'));\r\n+    const wb = XLSX.utils.book_new();\r\n+    XLSX.utils.book_append_sheet(wb, worksheet, 'Sheet1');\r\n+    XLSX.writeFile(wb, `EPFO_${fromMonth} to ${toMonth}.xlsx`);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    <PageHeader headerdata={headerdata}/>\r\n+         <div className=\"card card-table show-entire\">\r\n+              <div className=\"card-body\">\r\n+                <div className=\"page-table-header mb-2\">\r\n+                  <div className=\"row align-items-center\">\r\n+                    <div className=\"col\">\r\n+                      <div className=\"doctor-table-blk\">\r\n+                        <h3>ESI REPORT</h3>\r\n+                        <div className=\"doctor-search-blk\">\r\n+                          {/* <div className=\"top-nav-search table-search-blk\">\r\n+                            <form>\r\n+                              <input type=\"text\" className=\"form-control\" placeholder=\"Search here\" />\r\n+                              <a className=\"btn\" >\r\n+                                <img src={searchicon} alt=\"\" />\r\n+                              </a>\r\n+                            </form>\r\n+                          \r\n+                          </div> */}\r\n+                          <div className=\"add-groups\">\r\n+                            {/* <a href=\"add-doctor.html\" className=\"btn btn-primary add-pluss ms-2\">\r\n+                           \r\n+                              <img src={addicon} alt=\"\" />\r\n+                            </a> */}\r\n+                            \r\n+                          </div>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                    \r\n+                    <div className=\"col-auto  ms-auto\">\r\n+                      \r\n+                    <form >\r\n+\r\n+                    <a type='button' className=\" me-2\" >\r\n+                        {/* <img src={pdficon} alt=\"\" /> */}\r\n+                        {/* <input\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={fromMonth}\r\n+                          onChange={(e) => setFromMonth(e.target.value)}\r\n+                          required\r\n+                        /> */}\r\n+                      </a>\r\n+                      \r\n+                      <a type='button' className=\" me-2\" >\r\n+                        {/* <img src={pdficon} alt=\"\" /> */}\r\n+                        <input\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={fromMonth}\r\n+                          onChange={(e) => setFromMonth(e.target.value)}\r\n+                          required\r\n+                        />\r\n+                      </a>\r\n+                      <a type='button'  className=\" me-2\">\r\n+                        {/* <img src={TXticon} alt=\"\" /> */}\r\n+                        <input\r\n+                          // {...register('toMonth', { required: 'Please select a month' })}\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={toMonth}\r\n+                          onChange={(e) => setToMonth(e.target.value)}\r\n+                          required\r\n+                        />\r\n+                        \r\n+                        </a>\r\n+\r\n+                      <button className=\" btn btn-primary submit-form m-3\" onClick={handlesubmit}>\r\n+                          Submit\r\n+                      </button>\r\n+                      <button className='btn btn-primary submit-form m-2' onClick={downloadExcel}>Download Excel</button>\r\n+                      </form>\r\n+                    </div>\r\n+                  </div>\r\n+                </div>\r\n+                {Data.length === 0 ? \r\n+                (<p className='m-3'>No Data Available</p>):(\r\n+                    <div className=\"table-responsive\">\r\n+                  <table className=\"table border-0 custom-table comman-table mb-0 table-responsive\">\r\n+                    <thead>\r\n+                      <tr>\r\n+                        <th>SL NO</th>\r\n+                        <th>IP NUMBER</th>\r\n+                        <th>IP NAME</th>\r\n+                        <th>EMPLOYEE TYPE</th>\r\n+                        <th>No of Days for which wages paid/payable during the month</th>\r\n+                        <th>Total Monthly Wages</th>\r\n+                        <th> Reason Code for Zero workings days</th>\r\n+                        <th>Last Working Day</th>\r\n+                        <th>Employee Contribution</th>\r\n+                        <th>Employer Contribution</th>\r\n+                        <th>TOTAL ESI</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                       <tbody>\r\n+                    {Data.map((item, index) => (\r\n+                        <tr key={index}>\r\n+                          <td>{index + 1}</td>\r\n+                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n+                          <td>{item.employeeid && item.employeeid.name}</td>\r\n+                          <td>\r\n+                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n+                              ? item.employeeid.EmployeeTypeId.name\r\n+                              : ''}\r\n+                          </td>\r\n+                          <td></td>\r\n+                          <td></td>\r\n+                          <td> <select\r\n+                           className='form-control'\r\n+                               type=\"text\"\r\n+                               value={item.selectedValue} // Bind input value to selectedValue\r\n+                               onChange={event => handleSelectChange(index, event)}\r\n+                             >\r\n+                            <option value=\"\">Select reason code</option>\r\n+                            {options.map((option) => (\r\n+                              <option key={option.value} value={option.value}>\r\n+                                {option.label}\r\n+                              </option>\r\n+                            ))}\r\n+                          </select>\r\n+                          </td>\r\n+                            <td>\r\n+                              <input\r\n+                               className='form-control'\r\n+                               type=\"date\"\r\n+                               onChange={(e) => handleDateChange(index, e.target.value)}\r\n+                            />\r\n+                            </td>\r\n+                        </tr>\r\n+                      ))}\r\n+\r\n+                    </tbody>\r\n+                  </table>\r\n+                  <table className=\"table border-0 custom-table comman-tabless  mb-0 table-responsive\">\r\n+                    <thead>\r\n+                      <tr>\r\n+                        <th>SL NO</th>\r\n+                        <th>IP NUMBER</th>\r\n+                        <th>IP NAME</th>\r\n+                        <th>EMPLOYEE TYPE</th>\r\n+                        <th>No of Days for which wages paid/payable during the month</th>\r\n+                        <th>Total Monthly Wages</th>\r\n+                        <th> Reason Code for Zero workings days</th>\r\n+                        <th>Last Working Day</th>\r\n+                        <th>Employee Contribution</th>\r\n+                        <th>Employer Contribution</th>\r\n+                        <th>TOTAL ESI</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                 \r\n+                       <tbody>\r\n+                    {Data.map((item, index) => (\r\n+                        <tr key={index}>\r\n+                          <td>{index + 1}</td>\r\n+                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n+                          <td>{item.employeeid && item.employeeid.name}</td>\r\n+                          <td>\r\n+                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n+                              ? item.employeeid.EmployeeTypeId.name\r\n+                              : ''}\r\n+                          </td>\r\n+                          <td></td>\r\n+                          <td></td>\r\n+                          <td>{item.selectedValue?item.selectedValue:\"\"}</td>\r\n+                          <td>{item.lastworkday?item.lastworkday:\"\"}</td>\r\n+                            \r\n+                        </tr>\r\n+                      ))}\r\n+\r\n+                    </tbody>\r\n+                  </table>\r\n+                </div>\r\n+                      )}  \r\n+                \r\n+              </div>\r\n+              \r\n+            </div>\r\n+    </>\r\n+  )\r\n+}\r\n+\r\n+export default Esi\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704955389163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,286 @@\n+import React,{useState,useEffect, useMemo} from 'react'\r\n+import * as XLSX from 'xlsx';\r\n+import { toast } from 'react-toastify';\r\n+import { GetESIReport } from '../../Apicalls/Report';\r\n+import PageHeader from '../PageHeader';\r\n+\r\n+function Esi() {\r\n+  const [fromMonth, setFromMonth] = useState('');\r\n+  const [toMonth, setToMonth] = useState('');\r\n+  const [Data, setData] = useState([]);\r\n+  const [lastworkday, setLastWorkDay] = useState('');\r\n+  const [tablerow, setTablerow] = useState([]);\r\n+  const [selectedValue, setSelectedValue] = useState('');\r\n+\r\n+\r\n+  const handlesubmit = async (event) => {\r\n+    event.preventDefault();\r\n+    try {\r\n+      const formdata = {\r\n+        fromMonth: fromMonth,\r\n+        toMonth: toMonth,\r\n+      };\r\n+      const response = await GetESIReport(formdata);\r\n+      if (response.success) {\r\n+        setData(response.data);\r\n+        toast.success(response.message);\r\n+      } else {\r\n+        toast.error(response.message);\r\n+      }\r\n+    } catch (error) {\r\n+      console.log(error);\r\n+      toast.error(error.message);\r\n+    }\r\n+  };\r\n+  const options = [\r\n+    { value: '1', label: 'Option 1' },\r\n+    { value: '2', label: 'Option 2' },\r\n+    { value: '3', label: 'Option 3' },\r\n+    { value: '4', label: 'Option 4' },\r\n+    // Add more options here as needed...\r\n+  ];\r\n+\r\n+\r\n+  const handleSelectChange = (index, event) => {\r\n+    const value = event.target.value;\r\n+  \r\n+    setTablerow(prevRows => {\r\n+      const updatedRows = prevRows.map((row, i) => {\r\n+        if (i === index) {\r\n+          return { ...row, selectedValue: value };\r\n+        }\r\n+        return row;\r\n+      });\r\n+      return updatedRows;\r\n+    });\r\n+  };\r\n+  \r\n+  \r\n+  \r\n+  const headerdata = useMemo(() => {\r\n+\t\treturn {\r\n+\t\t  data:\"REPORT\",\r\n+\t\t  page:\"ESI REPORT\"\r\n+\t\t};\r\n+\t  }, []);\r\n+\r\n+\r\n+  const handleDateChange = (index, value) => {\r\n+    setTablerow(prevRows => {\r\n+      const updatedRows = [...prevRows];\r\n+      updatedRows[index] = {\r\n+        ...updatedRows[index],\r\n+        lastworkday: value\r\n+      };\r\n+      return updatedRows;\r\n+    });\r\n+  };\r\n+\r\n+  console.log(tablerow,\":tablerow\");\r\n+\r\n+  useEffect(()=>{\r\n+    if (Data&&tablerow) {\r\n+      const combinedArray = Data.map((row, index) => ({\r\n+        ...row,\r\n+        ...tablerow[index]\r\n+      }));\r\n+      setData(combinedArray)\r\n+      console.log(combinedArray,\":Combined Arrayys\");\r\n+    } else {\r\n+      console.error('Arrays are of different lengths. Cannot combine.');\r\n+    }\r\n+  \r\n+  },[tablerow])\r\n+\r\n+const downloadExcel = () => {\r\n+    const worksheet = XLSX.utils.table_to_sheet(document.querySelector('.comman-tabless'));\r\n+    const wb = XLSX.utils.book_new();\r\n+    XLSX.utils.book_append_sheet(wb, worksheet, 'Sheet1');\r\n+    XLSX.writeFile(wb, `EPFO_${fromMonth} to ${toMonth}.xlsx`);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    <PageHeader headerdata={headerdata}/>\r\n+         <div className=\"card card-table show-entire\">\r\n+              <div className=\"card-body\">\r\n+                <div className=\"page-table-header mb-2\">\r\n+                  <div className=\"row align-items-center\">\r\n+                    <div className=\"col\">\r\n+                      <div className=\"doctor-table-blk\">\r\n+                        <h3>ESI REPORT</h3>\r\n+                        <div className=\"doctor-search-blk\">\r\n+                          {/* <div className=\"top-nav-search table-search-blk\">\r\n+                            <form>\r\n+                              <input type=\"text\" className=\"form-control\" placeholder=\"Search here\" />\r\n+                              <a className=\"btn\" >\r\n+                                <img src={searchicon} alt=\"\" />\r\n+                              </a>\r\n+                            </form>\r\n+                          \r\n+                          </div> */}\r\n+                          <div className=\"add-groups\">\r\n+                            {/* <a href=\"add-doctor.html\" className=\"btn btn-primary add-pluss ms-2\">\r\n+                           \r\n+                              <img src={addicon} alt=\"\" />\r\n+                            </a> */}\r\n+                            \r\n+                          </div>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                    \r\n+                    <div className=\"col-auto  ms-auto\">\r\n+                      \r\n+                    <form >\r\n+\r\n+                    <a type='button' className=\" me-2\" >\r\n+                        {/* <img src={pdficon} alt=\"\" /> */}\r\n+                        {/* <input\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={fromMonth}\r\n+                          onChange={(e) => setFromMonth(e.target.value)}\r\n+                          required\r\n+                        /> */}\r\n+                        se\r\n+                      </a>\r\n+                      \r\n+                      <a type='button' className=\" me-2\" >\r\n+                        {/* <img src={pdficon} alt=\"\" /> */}\r\n+                        <input\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={fromMonth}\r\n+                          onChange={(e) => setFromMonth(e.target.value)}\r\n+                          required\r\n+                        />\r\n+                      </a>\r\n+                      <a type='button'  className=\" me-2\">\r\n+                        {/* <img src={TXticon} alt=\"\" /> */}\r\n+                        <input\r\n+                          // {...register('toMonth', { required: 'Please select a month' })}\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={toMonth}\r\n+                          onChange={(e) => setToMonth(e.target.value)}\r\n+                          required\r\n+                        />\r\n+                        \r\n+                        </a>\r\n+\r\n+                      <button className=\" btn btn-primary submit-form m-3\" onClick={handlesubmit}>\r\n+                          Submit\r\n+                      </button>\r\n+                      <button className='btn btn-primary submit-form m-2' onClick={downloadExcel}>Download Excel</button>\r\n+                      </form>\r\n+                    </div>\r\n+                  </div>\r\n+                </div>\r\n+                {Data.length === 0 ? \r\n+                (<p className='m-3'>No Data Available</p>):(\r\n+                    <div className=\"table-responsive\">\r\n+                  <table className=\"table border-0 custom-table comman-table mb-0 table-responsive\">\r\n+                    <thead>\r\n+                      <tr>\r\n+                        <th>SL NO</th>\r\n+                        <th>IP NUMBER</th>\r\n+                        <th>IP NAME</th>\r\n+                        <th>EMPLOYEE TYPE</th>\r\n+                        <th>No of Days for which wages paid/payable during the month</th>\r\n+                        <th>Total Monthly Wages</th>\r\n+                        <th> Reason Code for Zero workings days</th>\r\n+                        <th>Last Working Day</th>\r\n+                        <th>Employee Contribution</th>\r\n+                        <th>Employer Contribution</th>\r\n+                        <th>TOTAL ESI</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                       <tbody>\r\n+                    {Data.map((item, index) => (\r\n+                        <tr key={index}>\r\n+                          <td>{index + 1}</td>\r\n+                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n+                          <td>{item.employeeid && item.employeeid.name}</td>\r\n+                          <td>\r\n+                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n+                              ? item.employeeid.EmployeeTypeId.name\r\n+                              : ''}\r\n+                          </td>\r\n+                          <td></td>\r\n+                          <td></td>\r\n+                          <td> <select\r\n+                           className='form-control'\r\n+                               type=\"text\"\r\n+                               value={item.selectedValue} // Bind input value to selectedValue\r\n+                               onChange={event => handleSelectChange(index, event)}\r\n+                             >\r\n+                            <option value=\"\">Select reason code</option>\r\n+                            {options.map((option) => (\r\n+                              <option key={option.value} value={option.value}>\r\n+                                {option.label}\r\n+                              </option>\r\n+                            ))}\r\n+                          </select>\r\n+                          </td>\r\n+                            <td>\r\n+                              <input\r\n+                               className='form-control'\r\n+                               type=\"date\"\r\n+                               onChange={(e) => handleDateChange(index, e.target.value)}\r\n+                            />\r\n+                            </td>\r\n+                        </tr>\r\n+                      ))}\r\n+\r\n+                    </tbody>\r\n+                  </table>\r\n+                  <table className=\"table border-0 custom-table comman-tabless  mb-0 table-responsive\">\r\n+                    <thead>\r\n+                      <tr>\r\n+                        <th>SL NO</th>\r\n+                        <th>IP NUMBER</th>\r\n+                        <th>IP NAME</th>\r\n+                        <th>EMPLOYEE TYPE</th>\r\n+                        <th>No of Days for which wages paid/payable during the month</th>\r\n+                        <th>Total Monthly Wages</th>\r\n+                        <th> Reason Code for Zero workings days</th>\r\n+                        <th>Last Working Day</th>\r\n+                        <th>Employee Contribution</th>\r\n+                        <th>Employer Contribution</th>\r\n+                        <th>TOTAL ESI</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                 \r\n+                       <tbody>\r\n+                    {Data.map((item, index) => (\r\n+                        <tr key={index}>\r\n+                          <td>{index + 1}</td>\r\n+                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n+                          <td>{item.employeeid && item.employeeid.name}</td>\r\n+                          <td>\r\n+                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n+                              ? item.employeeid.EmployeeTypeId.name\r\n+                              : ''}\r\n+                          </td>\r\n+                          <td></td>\r\n+                          <td></td>\r\n+                          <td>{item.selectedValue?item.selectedValue:\"\"}</td>\r\n+                          <td>{item.lastworkday?item.lastworkday:\"\"}</td>\r\n+                            \r\n+                        </tr>\r\n+                      ))}\r\n+\r\n+                    </tbody>\r\n+                  </table>\r\n+                </div>\r\n+                      )}  \r\n+                \r\n+              </div>\r\n+              \r\n+            </div>\r\n+    </>\r\n+  )\r\n+}\r\n+\r\n+export default Esi\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704955413749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,284 @@\n+import React,{useState,useEffect, useMemo} from 'react'\r\n+import * as XLSX from 'xlsx';\r\n+import { toast } from 'react-toastify';\r\n+import { GetESIReport } from '../../Apicalls/Report';\r\n+import PageHeader from '../PageHeader';\r\n+\r\n+function Esi() {\r\n+  const [fromMonth, setFromMonth] = useState('');\r\n+  const [toMonth, setToMonth] = useState('');\r\n+  const [Data, setData] = useState([]);\r\n+  const [lastworkday, setLastWorkDay] = useState('');\r\n+  const [tablerow, setTablerow] = useState([]);\r\n+  const [selectedValue, setSelectedValue] = useState('');\r\n+\r\n+\r\n+  const handlesubmit = async (event) => {\r\n+    event.preventDefault();\r\n+    try {\r\n+      const formdata = {\r\n+        fromMonth: fromMonth,\r\n+        toMonth: toMonth,\r\n+      };\r\n+      const response = await GetESIReport(formdata);\r\n+      if (response.success) {\r\n+        setData(response.data);\r\n+        toast.success(response.message);\r\n+      } else {\r\n+        toast.error(response.message);\r\n+      }\r\n+    } catch (error) {\r\n+      console.log(error);\r\n+      toast.error(error.message);\r\n+    }\r\n+  };\r\n+  const options = [\r\n+    { value: '1', label: 'Option 1' },\r\n+    { value: '2', label: 'Option 2' },\r\n+    { value: '3', label: 'Option 3' },\r\n+    { value: '4', label: 'Option 4' },\r\n+    // Add more options here as needed...\r\n+  ];\r\n+\r\n+\r\n+  const handleSelectChange = (index, event) => {\r\n+    const value = event.target.value;\r\n+  \r\n+    setTablerow(prevRows => {\r\n+      const updatedRows = prevRows.map((row, i) => {\r\n+        if (i === index) {\r\n+          return { ...row, selectedValue: value };\r\n+        }\r\n+        return row;\r\n+      });\r\n+      return updatedRows;\r\n+    });\r\n+  };\r\n+  \r\n+  \r\n+  \r\n+  const headerdata = useMemo(() => {\r\n+\t\treturn {\r\n+\t\t  data:\"REPORT\",\r\n+\t\t  page:\"ESI REPORT\"\r\n+\t\t};\r\n+\t  }, []);\r\n+\r\n+\r\n+  const handleDateChange = (index, value) => {\r\n+    setTablerow(prevRows => {\r\n+      const updatedRows = [...prevRows];\r\n+      updatedRows[index] = {\r\n+        ...updatedRows[index],\r\n+        lastworkday: value\r\n+      };\r\n+      return updatedRows;\r\n+    });\r\n+  };\r\n+\r\n+  console.log(tablerow,\":tablerow\");\r\n+\r\n+  useEffect(()=>{\r\n+    if (Data&&tablerow) {\r\n+      const combinedArray = Data.map((row, index) => ({\r\n+        ...row,\r\n+        ...tablerow[index]\r\n+      }));\r\n+      setData(combinedArray)\r\n+      console.log(combinedArray,\":Combined Arrayys\");\r\n+    } else {\r\n+      console.error('Arrays are of different lengths. Cannot combine.');\r\n+    }\r\n+  \r\n+  },[tablerow])\r\n+\r\n+const downloadExcel = () => {\r\n+    const worksheet = XLSX.utils.table_to_sheet(document.querySelector('.comman-tabless'));\r\n+    const wb = XLSX.utils.book_new();\r\n+    XLSX.utils.book_append_sheet(wb, worksheet, 'Sheet1');\r\n+    XLSX.writeFile(wb, `EPFO_${fromMonth} to ${toMonth}.xlsx`);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    <PageHeader headerdata={headerdata}/>\r\n+         <div className=\"card card-table show-entire\">\r\n+              <div className=\"card-body\">\r\n+                <div className=\"page-table-header mb-2\">\r\n+                  <div className=\"row align-items-center\">\r\n+                    <div className=\"col\">\r\n+                      <div className=\"doctor-table-blk\">\r\n+                        <h3>ESI REPORT</h3>\r\n+                        <div className=\"doctor-search-blk\">\r\n+                          {/* <div className=\"top-nav-search table-search-blk\">\r\n+                            <form>\r\n+                              <input type=\"text\" className=\"form-control\" placeholder=\"Search here\" />\r\n+                              <a className=\"btn\" >\r\n+                                <img src={searchicon} alt=\"\" />\r\n+                              </a>\r\n+                            </form>\r\n+                          \r\n+                          </div> */}\r\n+                          <div className=\"add-groups\">\r\n+                            {/* <a href=\"add-doctor.html\" className=\"btn btn-primary add-pluss ms-2\">\r\n+                           \r\n+                              <img src={addicon} alt=\"\" />\r\n+                            </a> */}\r\n+                            \r\n+                          </div>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                    \r\n+                    <div className=\"col-auto  ms-auto\">\r\n+                      \r\n+                    <form >\r\n+                    <a type='button' className=\" me-2\" >\r\n+                        {/* <img src={pdficon} alt=\"\" /> */}\r\n+                        <input\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={fromMonth}\r\n+                          onChange={(e) => setFromMonth(e.target.value)}\r\n+                          required\r\n+                        />\r\n+                      </a>\r\n+                          \r\n+                      <a type='button' className=\" me-2\" >\r\n+                        {/* <img src={pdficon} alt=\"\" /> */}\r\n+                        <input\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={fromMonth}\r\n+                          onChange={(e) => setFromMonth(e.target.value)}\r\n+                          required\r\n+                        />\r\n+                      </a>\r\n+                      <a type='button'  className=\" me-2\">\r\n+                        {/* <img src={TXticon} alt=\"\" /> */}\r\n+                        <input\r\n+                          // {...register('toMonth', { required: 'Please select a month' })}\r\n+                        className='form-control'\r\n+                          type=\"date\"\r\n+                          value={toMonth}\r\n+                          onChange={(e) => setToMonth(e.target.value)}\r\n+                          required\r\n+                        />\r\n+                        \r\n+                        </a>\r\n+\r\n+                      <button className=\" btn btn-primary submit-form m-3\" onClick={handlesubmit}>\r\n+                          Submit\r\n+                      </button>\r\n+                      <button className='btn btn-primary submit-form m-2' onClick={downloadExcel}>Download Excel</button>\r\n+                      </form>\r\n+                    </div>\r\n+                  </div>\r\n+                </div>\r\n+                {Data.length === 0 ? \r\n+                (<p className='m-3'>No Data Available</p>):(\r\n+                    <div className=\"table-responsive\">\r\n+                  <table className=\"table border-0 custom-table comman-table mb-0 table-responsive\">\r\n+                    <thead>\r\n+                      <tr>\r\n+                        <th>SL NO</th>\r\n+                        <th>IP NUMBER</th>\r\n+                        <th>IP NAME</th>\r\n+                        <th>EMPLOYEE TYPE</th>\r\n+                        <th>No of Days for which wages paid/payable during the month</th>\r\n+                        <th>Total Monthly Wages</th>\r\n+                        <th> Reason Code for Zero workings days</th>\r\n+                        <th>Last Working Day</th>\r\n+                        <th>Employee Contribution</th>\r\n+                        <th>Employer Contribution</th>\r\n+                        <th>TOTAL ESI</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                       <tbody>\r\n+                    {Data.map((item, index) => (\r\n+                        <tr key={index}>\r\n+                          <td>{index + 1}</td>\r\n+                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n+                          <td>{item.employeeid && item.employeeid.name}</td>\r\n+                          <td>\r\n+                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n+                              ? item.employeeid.EmployeeTypeId.name\r\n+                              : ''}\r\n+                          </td>\r\n+                          <td></td>\r\n+                          <td></td>\r\n+                          <td> <select\r\n+                           className='form-control'\r\n+                               type=\"text\"\r\n+                               value={item.selectedValue} // Bind input value to selectedValue\r\n+                               onChange={event => handleSelectChange(index, event)}\r\n+                             >\r\n+                            <option value=\"\">Select reason code</option>\r\n+                            {options.map((option) => (\r\n+                              <option key={option.value} value={option.value}>\r\n+                                {option.label}\r\n+                              </option>\r\n+                            ))}\r\n+                          </select>\r\n+                          </td>\r\n+                            <td>\r\n+                              <input\r\n+                               className='form-control'\r\n+                               type=\"date\"\r\n+                               onChange={(e) => handleDateChange(index, e.target.value)}\r\n+                            />\r\n+                            </td>\r\n+                        </tr>\r\n+                      ))}\r\n+\r\n+                    </tbody>\r\n+                  </table>\r\n+                  <table className=\"table border-0 custom-table comman-tabless  mb-0 table-responsive\">\r\n+                    <thead>\r\n+                      <tr>\r\n+                        <th>SL NO</th>\r\n+                        <th>IP NUMBER</th>\r\n+                        <th>IP NAME</th>\r\n+                        <th>EMPLOYEE TYPE</th>\r\n+                        <th>No of Days for which wages paid/payable during the month</th>\r\n+                        <th>Total Monthly Wages</th>\r\n+                        <th> Reason Code for Zero workings days</th>\r\n+                        <th>Last Working Day</th>\r\n+                        <th>Employee Contribution</th>\r\n+                        <th>Employer Contribution</th>\r\n+                        <th>TOTAL ESI</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                 \r\n+                       <tbody>\r\n+                    {Data.map((item, index) => (\r\n+                        <tr key={index}>\r\n+                          <td>{index + 1}</td>\r\n+                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n+                          <td>{item.employeeid && item.employeeid.name}</td>\r\n+                          <td>\r\n+                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n+                              ? item.employeeid.EmployeeTypeId.name\r\n+                              : ''}\r\n+                          </td>\r\n+                          <td></td>\r\n+                          <td></td>\r\n+                          <td>{item.selectedValue?item.selectedValue:\"\"}</td>\r\n+                          <td>{item.lastworkday?item.lastworkday:\"\"}</td>\r\n+                            \r\n+                        </tr>\r\n+                      ))}\r\n+\r\n+                    </tbody>\r\n+                  </table>\r\n+                </div>\r\n+                      )}  \r\n+                \r\n+              </div>\r\n+              \r\n+            </div>\r\n+    </>\r\n+  )\r\n+}\r\n+\r\n+export default Esi\n\\ No newline at end of file\n"
                }
            ],
            "date": 1704955347207,
            "name": "Commit-0",
            "content": "import React,{useState,useEffect, useMemo} from 'react'\r\nimport * as XLSX from 'xlsx';\r\nimport { toast } from 'react-toastify';\r\nimport { GetESIReport } from '../../Apicalls/Report';\r\nimport PageHeader from '../PageHeader';\r\n\r\nfunction Esi() {\r\n  const [fromMonth, setFromMonth] = useState('');\r\n  const [toMonth, setToMonth] = useState('');\r\n  const [Data, setData] = useState([]);\r\n  const [lastworkday, setLastWorkDay] = useState('');\r\n  const [tablerow, setTablerow] = useState([]);\r\n  const [selectedValue, setSelectedValue] = useState('');\r\n\r\n\r\n  const handlesubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const formdata = {\r\n        fromMonth: fromMonth,\r\n        toMonth: toMonth,\r\n      };\r\n      const response = await GetESIReport(formdata);\r\n      if (response.success) {\r\n        setData(response.data);\r\n        toast.success(response.message);\r\n      } else {\r\n        toast.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n  const options = [\r\n    { value: '1', label: 'Option 1' },\r\n    { value: '2', label: 'Option 2' },\r\n    { value: '3', label: 'Option 3' },\r\n    { value: '4', label: 'Option 4' },\r\n    // Add more options here as needed...\r\n  ];\r\n\r\n\r\n  const handleSelectChange = (index, event) => {\r\n    const value = event.target.value;\r\n  \r\n    setTablerow(prevRows => {\r\n      const updatedRows = prevRows.map((row, i) => {\r\n        if (i === index) {\r\n          return { ...row, selectedValue: value };\r\n        }\r\n        return row;\r\n      });\r\n      return updatedRows;\r\n    });\r\n  };\r\n  \r\n  \r\n  \r\n  const headerdata = useMemo(() => {\r\n\t\treturn {\r\n\t\t  data:\"REPORT\",\r\n\t\t  page:\"ESI REPORT\"\r\n\t\t};\r\n\t  }, []);\r\n\r\n\r\n  const handleDateChange = (index, value) => {\r\n    setTablerow(prevRows => {\r\n      const updatedRows = [...prevRows];\r\n      updatedRows[index] = {\r\n        ...updatedRows[index],\r\n        lastworkday: value\r\n      };\r\n      return updatedRows;\r\n    });\r\n  };\r\n\r\n  console.log(tablerow,\":tablerow\");\r\n\r\n  useEffect(()=>{\r\n    if (Data&&tablerow) {\r\n      const combinedArray = Data.map((row, index) => ({\r\n        ...row,\r\n        ...tablerow[index]\r\n      }));\r\n      setData(combinedArray)\r\n      console.log(combinedArray,\":Combined Arrayys\");\r\n    } else {\r\n      console.error('Arrays are of different lengths. Cannot combine.');\r\n    }\r\n  \r\n  },[tablerow])\r\n\r\nconst downloadExcel = () => {\r\n    const worksheet = XLSX.utils.table_to_sheet(document.querySelector('.comman-tabless'));\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, worksheet, 'Sheet1');\r\n    XLSX.writeFile(wb, `EPFO_${fromMonth} to ${toMonth}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <PageHeader headerdata={headerdata}/>\r\n         <div className=\"card card-table show-entire\">\r\n              <div className=\"card-body\">\r\n                <div className=\"page-table-header mb-2\">\r\n                  <div className=\"row align-items-center\">\r\n                    <div className=\"col\">\r\n                      <div className=\"doctor-table-blk\">\r\n                        <h3>ESI REPORT</h3>\r\n                        <div className=\"doctor-search-blk\">\r\n                          {/* <div className=\"top-nav-search table-search-blk\">\r\n                            <form>\r\n                              <input type=\"text\" className=\"form-control\" placeholder=\"Search here\" />\r\n                              <a className=\"btn\" >\r\n                                <img src={searchicon} alt=\"\" />\r\n                              </a>\r\n                            </form>\r\n                          \r\n                          </div> */}\r\n                          <div className=\"add-groups\">\r\n                            {/* <a href=\"add-doctor.html\" className=\"btn btn-primary add-pluss ms-2\">\r\n                           \r\n                              <img src={addicon} alt=\"\" />\r\n                            </a> */}\r\n                            \r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"col-auto  ms-auto\">\r\n                      \r\n                    <form >\r\n                    <a type='button' className=\" me-2\" >\r\n                        {/* <img src={pdficon} alt=\"\" /> */}\r\n                        <input\r\n                        className='form-control'\r\n                          type=\"date\"\r\n                          value={fromMonth}\r\n                          onChange={(e) => setFromMonth(e.target.value)}\r\n                          required\r\n                        />\r\n                      </a>\r\n                          \r\n                      <a type='button' className=\" me-2\" >\r\n                        {/* <img src={pdficon} alt=\"\" /> */}\r\n                        <input\r\n                        className='form-control'\r\n                          type=\"date\"\r\n                          value={fromMonth}\r\n                          onChange={(e) => setFromMonth(e.target.value)}\r\n                          required\r\n                        />\r\n                      </a>\r\n                      <a type='button'  className=\" me-2\">\r\n                        {/* <img src={TXticon} alt=\"\" /> */}\r\n                        <input\r\n                          // {...register('toMonth', { required: 'Please select a month' })}\r\n                        className='form-control'\r\n                          type=\"date\"\r\n                          value={toMonth}\r\n                          onChange={(e) => setToMonth(e.target.value)}\r\n                          required\r\n                        />\r\n                        \r\n                        </a>\r\n\r\n                      <button className=\" btn btn-primary submit-form m-3\" onClick={handlesubmit}>\r\n                          Submit\r\n                      </button>\r\n                      <button className='btn btn-primary submit-form m-2' onClick={downloadExcel}>Download Excel</button>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {Data.length === 0 ? \r\n                (<p className='m-3'>No Data Available</p>):(\r\n                    <div className=\"table-responsive\">\r\n                  <table className=\"table border-0 custom-table comman-table mb-0 table-responsive\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>SL NO</th>\r\n                        <th>IP NUMBER</th>\r\n                        <th>IP NAME</th>\r\n                        <th>EMPLOYEE TYPE</th>\r\n                        <th>No of Days for which wages paid/payable during the month</th>\r\n                        <th>Total Monthly Wages</th>\r\n                        <th> Reason Code for Zero workings days</th>\r\n                        <th>Last Working Day</th>\r\n                        <th>Employee Contribution</th>\r\n                        <th>Employer Contribution</th>\r\n                        <th>TOTAL ESI</th>\r\n                      </tr>\r\n                    </thead>\r\n                       <tbody>\r\n                    {Data.map((item, index) => (\r\n                        <tr key={index}>\r\n                          <td>{index + 1}</td>\r\n                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n                          <td>{item.employeeid && item.employeeid.name}</td>\r\n                          <td>\r\n                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n                              ? item.employeeid.EmployeeTypeId.name\r\n                              : ''}\r\n                          </td>\r\n                          <td></td>\r\n                          <td></td>\r\n                          <td> <select\r\n                           className='form-control'\r\n                               type=\"text\"\r\n                               value={item.selectedValue} // Bind input value to selectedValue\r\n                               onChange={event => handleSelectChange(index, event)}\r\n                             >\r\n                            <option value=\"\">Select reason code</option>\r\n                            {options.map((option) => (\r\n                              <option key={option.value} value={option.value}>\r\n                                {option.label}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                          </td>\r\n                            <td>\r\n                              <input\r\n                               className='form-control'\r\n                               type=\"date\"\r\n                               onChange={(e) => handleDateChange(index, e.target.value)}\r\n                            />\r\n                            </td>\r\n                        </tr>\r\n                      ))}\r\n\r\n                    </tbody>\r\n                  </table>\r\n                  <table className=\"table border-0 custom-table comman-tabless  mb-0 table-responsive\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>SL NO</th>\r\n                        <th>IP NUMBER</th>\r\n                        <th>IP NAME</th>\r\n                        <th>EMPLOYEE TYPE</th>\r\n                        <th>No of Days for which wages paid/payable during the month</th>\r\n                        <th>Total Monthly Wages</th>\r\n                        <th> Reason Code for Zero workings days</th>\r\n                        <th>Last Working Day</th>\r\n                        <th>Employee Contribution</th>\r\n                        <th>Employer Contribution</th>\r\n                        <th>TOTAL ESI</th>\r\n                      </tr>\r\n                    </thead>\r\n                 \r\n                       <tbody>\r\n                    {Data.map((item, index) => (\r\n                        <tr key={index}>\r\n                          <td>{index + 1}</td>\r\n                          <td>{item.employeeid && item.employeeid.Ipnumber}</td>\r\n                          <td>{item.employeeid && item.employeeid.name}</td>\r\n                          <td>\r\n                            {item.employeeid && item.employeeid.EmployeeTypeId\r\n                              ? item.employeeid.EmployeeTypeId.name\r\n                              : ''}\r\n                          </td>\r\n                          <td></td>\r\n                          <td></td>\r\n                          <td>{item.selectedValue?item.selectedValue:\"\"}</td>\r\n                          <td>{item.lastworkday?item.lastworkday:\"\"}</td>\r\n                            \r\n                        </tr>\r\n                      ))}\r\n\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                      )}  \r\n                \r\n              </div>\r\n              \r\n            </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Esi"
        }
    ]
}