{
    "sourceFile": "frontend/src/Components/SalaryMaster/Salarylist.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1704352954670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704353057178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n                       {memoizedData.map((item, index) => (\r\n                         <tr key={item._id}>\r\n                           <td>{index + 1}</td>\r\n                           <td>{item.name}</td>\r\n-                          {/* <td>{item.purpose.name}</td> */}\r\n+                          <td>{item.purpose.name}</td>\r\n                           <td>{item.type}</td>\r\n                           {index < 3 ? (\r\n \r\n    <td></td> \r\n"
                },
                {
                    "date": 1704353173319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     }\r\n \r\n     fetchData();\r\n   }, []);\r\n-\r\n+console.log(Data,\":Dataaaaaaaaa\");\r\n   const memoizedData = useMemo(() => Data, [Data]);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1704353267466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     }\r\n \r\n     fetchData();\r\n   }, []);\r\n-console.log(Data,\":Dataaaaaaaaa\");\r\n+\r\n   const memoizedData = useMemo(() => Data, [Data]);\r\n \r\n \r\n \r\n"
                }
            ],
            "date": 1704352954670,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState,useCallback,useMemo  } from 'react';\r\nimport searchicon from '../../assets/img/icons/search-normal.svg';\r\nimport addicon from '../../assets/img/icons/plus.svg';\r\nimport refreshicon from '../../assets/img/icons/re-fresh.svg';\r\nimport pdficon from '../../assets/img/icons/pdf-icon-01.svg';\r\nimport TXticon from '../../assets/img/icons/pdf-icon-02.svg';\r\nimport csvicon from '../../assets/img/icons/pdf-icon-03.svg';\r\nimport Excelicon from '../../assets/img/icons/pdf-icon-04.svg';\r\nimport SalaryMasteredit from '../Modal/SalaryMasteredit';\r\nimport { getallSalary } from '../../Apicalls/salarymaster';\r\nimport Salarymasterdelete from '../Modal/Salarymasterdelete';\r\n\r\nfunction Salarylist({ formdata, setformdata }) {\r\n  console.log(formdata, 'yyyyyyyyyyyyyyyy');\r\n  const [Data, setData] = useState([]);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [showDeleteModal, setshowDeleteModal] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\nuseEffect(() => {\r\n\tif (formdata.length !== 0) {\r\n\t  setData((prevData) => [...prevData,formdata]);\r\n\t  setformdata([]);\r\n\t}\r\n  }, [formdata]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const result = await getallSalary();\r\n        console.log(result.data, 'response');\r\n        setData(result.data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const memoizedData = useMemo(() => Data, [Data]);\r\n\r\n\r\n\r\n  const handleEditClick = useCallback((item) => {\r\n    \r\n\tsetShowEditModal(true);\r\n\tsetSelectedItem(item);\r\n  }, []);\r\n\r\n  // Function to close the modal\r\nconst closeEditModal = () => {\r\n\t// Set showEditModal to false when the modal is closed\r\n\tsetShowEditModal(false);\r\n  };\r\n\r\n   // Function to handle the click event\r\n const handleDeleteClick = (item) => {\r\n\tconsole.log(item);\r\n\tsetshowDeleteModal(true)\r\n\tsetSelectedItem(item)\r\n   };\r\n   \r\n   const closeDeleteModal = () => {\r\n\t // Set showEditModal to false when the modal is closed\r\n\t setshowDeleteModal(false);\r\n   };\r\n  if (isLoading) {\r\n    return <div>Loading...</div>; // You can render a loading indicator here\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          {memoizedData.length === 0 ? (\r\n            <p>No Data available</p>\r\n          ) : (\r\n            <div className=\"card card-table show-entire\">\r\n              <div className=\"card-body\">\r\n                <div className=\"page-table-header mb-2\">\r\n                  <div className=\"row align-items-center\">\r\n                    <div className=\"col\">\r\n                      <div className=\"doctor-table-blk\">\r\n                        <h3>Salary Master List</h3>\r\n                        <div className=\"doctor-search-blk\">\r\n                          <div className=\"top-nav-search table-search-blk\">\r\n                            <form>\r\n                              <input type=\"text\" className=\"form-control\" placeholder=\"Search here\" />\r\n                              <a className=\"btn\">\r\n                                <img src={searchicon} alt=\"\" />\r\n                              </a>\r\n                            </form>\r\n                          </div>\r\n                         <div className=\"add-group\">\r\n                            {/*  <a href=\"add-doctor.html\" className=\"btn btn-primary add-pluss ms-2\">\r\n                              <img src={addicon} alt=\"\" />\r\n                            </a>\r\n                            */}\r\n                            <a href=\"javascript:;\" className=\"btn btn-primary doctor-refresh ms-2\">\r\n                              <img src={refreshicon} alt=\"\" />\r\n                            </a>\r\n                          </div> \r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-auto text-end float-end ms-auto download-grp\">\r\n                      <a href=\"javascript:;\" className=\" me-2\">\r\n                        <img src={pdficon} alt=\"\" />\r\n                      </a>\r\n                      <a href=\"javascript:;\" className=\" me-2\">\r\n                        <img src={TXticon} alt=\"\" />\r\n                      </a>\r\n                      <a href=\"javascript:;\" className=\" me-2\">\r\n                        <img src={csvicon} alt=\"\" />\r\n                      </a>\r\n                      <a href=\"javascript:;\">\r\n                        <img src={Excelicon} alt=\"\" />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"table-responsive\">\r\n                  <table className=\"table border-0 custom-table comman-table datatable mb-0\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>No</th>\r\n                        <th>Name</th>\r\n                        <th>Purpose</th>\r\n                        <th>Type</th>\r\n                        <th></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td></td>\r\n                      </tr>\r\n                    </tbody>\r\n                    <tbody>\r\n                      {memoizedData.map((item, index) => (\r\n                        <tr key={item._id}>\r\n                          <td>{index + 1}</td>\r\n                          <td>{item.name}</td>\r\n                          {/* <td>{item.purpose.name}</td> */}\r\n                          <td>{item.type}</td>\r\n                          {index < 3 ? (\r\n\r\n   <td></td> \r\n) : (\r\n // You can render something else or leave it empty for items beyond the first three\r\n <td className=\"text-end\">\r\n <div className=\"dropdown dropdown-action\">\r\n   <a href=\"#\" className=\"action-icon dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n     <i className=\"fa fa-ellipsis-v\"></i>\r\n   </a>\r\n   <div className=\"dropdown-menu dropdown-menu-end\">\r\n     <a\r\n       onMouseEnter={() => {\r\n         setSelectedItem(item);\r\n         setShowEditModal(true);\r\n       }}\r\n       onClick={() => handleEditClick(item)}\r\n       className=\"dropdown-item\"\r\n       data-bs-toggle=\"modal\"\r\n       data-bs-target=\"#delete_patients\"\r\n     >\r\n       <i className=\"fa-solid fa-pen-to-square m-r-5\"></i> Edit\r\n     </a>\r\n     <a\r\n       className=\"dropdown-item\"\r\n       href=\"#\"\r\n       data-bs-toggle=\"modal\"\r\n       data-bs-target=\"#delete_patient\"\r\n       onMouseEnter={() => {\r\n         setshowDeleteModal(true);\r\n         setSelectedItem(item);\r\n       }}\r\n       onClick={() => handleDeleteClick(item)}\r\n     >\r\n       <i className=\"fa fa-trash-alt m-r-5\"></i> Delete\r\n     </a>\r\n   </div>\r\n </div>\r\n</td>\r\n)}\r\n\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {showEditModal && selectedItem && (\r\n  <SalaryMasteredit\r\n  setData={setData}\r\n  Data={Data}\r\n    item={selectedItem}\r\n    closeEditModal={closeEditModal}\r\n   \r\n  />\r\n)}\r\n\r\n{showDeleteModal && selectedItem &&(<Salarymasterdelete\r\n setData={setData}\r\n Data={Data}\r\n item={selectedItem}\r\n closeDeleteModal={closeDeleteModal}\r\n/>)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(Salarylist);\r\n"
        }
    ]
}